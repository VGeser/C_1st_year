1)
#include <stdio.h>

#define N 103
int divisors[N], rests[N];

long long nodext(long long a, long long b, long long *x, long long *y) {
    long long nod, x1, y1;
    if (!a) {
        *x = 0, *y = 1;
        return b;
    }
    nod = nodext(b % a, a, &x1, &y1);
    *x = y1 - (b / a) * x1;
    *y = x1;
    return nod;
}

long long flip(long long a, long long mod) {
    long long k1, k2, div;
    div = nodext(a, mod, &k1, &k2);
    if (div != 1) {
        return -1;
    } else {
        return ((k1 % mod) + mod) % mod;
    }
}

int main() {
    FILE *filein = fopen("input.txt", "rt");
    FILE *fileout = fopen("output.txt", "wt");
    int k;
    long long M = 1, ans = 0;
    fscanf(filein, "%d", &k);
    for (int i = 0; i < k; ++i) {
        fscanf(filein, "%d", &divisors[i]);
        M *= divisors[i];
    }
    for (int i = 0; i < k; ++i) {
        fscanf(filein, "%d", &rests[i]);
    }
    long long Mi, q = 0;
    for (int i = 0; i < k; i++) {
        Mi = M / divisors[i];
        q = flip(Mi, divisors[i]);
        ans = (ans + Mi * ((q * rests[i]) % divisors[i])) % M;
    }
    fprintf(fileout, "%lld", ans);
    fclose(filein);
    fclose(fileout);
    return 0;
}

2)
main.c:
#include <assert.h>
#include "modular.h"

int MOD;

int main() {
    MOD = 13;
    int a = 45;
    a = pnorm(a);
    assert (a == 6);
    int x = pmul(padd(7, psub(2, 3)), 5);
    assert (x == 4);
    int y = pdiv(7, x);
    assert (pmul(x, y) == 7);
    MOD = 2;
    assert (pnorm(5) == 1);
    MOD = 11;
    assert(pdiv(5, 7) == 7);
    MOD = 5;
    assert(pnorm(-3) == 2);
    assert(padd(4, 3) == 2);
    assert(psub(1, 4) == 2);
    MOD = 999999937;
    x = 999999936;
    y = 999999935;
    assert(pmul(x, y) == 2);
    assert(pdiv(x,y)==499999969);
    return 0;
}

modular.h:
#ifndef TEST_MODULAR_H
#define TEST_MODULAR_H
extern int MOD;

int pnorm(int a);

int padd(int a, int b);

int psub(int a, int b);

int pmul(int a, int b);

int pdiv(int a, int b);

#endif

modular.c:
#include "modular.h"

int MOD;

int pnorm(int inp) {
    inp = inp % MOD;
    if (inp % MOD < 0) {
        inp = MOD + inp;
    }
    return inp;
}

int padd(int fir, int sec) {
    fir = pnorm(fir);
    sec = pnorm(sec);
    int ans = pnorm(fir + sec);
    return ans >= 0 ? ans : MOD + ans;
}

int psub(int fir, int sec) {
    fir = pnorm(fir);
    sec = pnorm(sec);
    return pnorm(fir - sec + MOD);
}

int pmul(int fir, int sec) {
    fir = pnorm(fir);
    sec = pnorm(sec);
    int ans = 0;
    if (fir >= (46341) || sec >= (46341)) {
        unsigned long long ans1=fir;
        ans1*=sec;
        ans1%=MOD;
        ans = pnorm((int) ans1);
    } else {
        ans = pnorm(fir * sec);
    }
    return ans >= 0 ? ans : MOD + ans;
}

void nodext(int a, int b, int *x, int *y) {
    if (!a) {
        (*x) = 0;
        (*y) = 1;
        return;
    }
    int x1 = 0, y1 = 0;
    nodext(b % a, a, &x1, &y1);
    (*x) = y1 - (b / a) * x1;
    (*y) = x1;
}

int pdiv(int fir, int sec) {
    int t = 0, t1 = 0;
    nodext(sec, MOD, &t, &t1);
    t = t < 0 ? t + MOD : t;
    return pmul(fir, t);
}
